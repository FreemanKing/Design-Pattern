#include<iostream>
#include<string>
#include<map>

using namespace std;

// The 'Flyweight' abstract class
class CharacterInf
{
public:
  virtual void Display(int pointSize) = 0;

protected:
  char charSymbol;
  int FontSize;
};

// A 'ConcreteFlyweight' class
class CharacterInfA : public CharacterInf
{
public:
  CharacterInfA()
  {
    charSymbol    = 'A';
    FontSize     = 120;
  }
  void Display(int pointSize)
  {
    pointSize = pointSize;
    cout<<charSymbol<<" (pointsize "<<pointSize<<" )"<<endl;
  }
};

// A 'ConcreteFlyweight' class
class CharacterInfB : public CharacterInf
{
public:
  CharacterInfB()
  {
    charSymbol    = 'B';
    FontSize     = 140;
  }
  void Display(int pointSize)
  {
    pointSize = pointSize;
    cout<<charSymbol<<" (pointsize "<<pointSize<<" )"<<endl;
  }
};

//C, D, E,...

// A 'ConcreteFlyweight' class
class CharacterInfZ : public CharacterInf
{
public:
  CharacterInfZ()
  {
    charSymbol    = 'Z';
    FontSize     = 100;
  }
  void Display(int pointSize)
  {
    pointSize = pointSize;
    cout<<charSymbol<<" (pointsize "<<pointSize<<" )"<<endl;
  }
};

// The 'FlyweightFactory' class
class CharacterInfFactory
{
private:
  map<char, CharacterInf*> hashMap;
public:
  virtual ~CharacterInfFactory()
  {
    while(!hashMap.empty())
    {
      map<char, CharacterInf*>::iterator it = hashMap.begin();
      delete it->second;
      hashMap.erase(it);
    }
  }
  CharacterInf* GetCharacterObj(char key)
  {
    CharacterInf* CharacterInf = NULL;
    if(hashMap.find(key) != hashMap.end())
    {
      CharacterInf = hashMap[key];
    }
    else
    {
      switch(key)
      {
      case 'A':
        CharacterInf = new CharacterInfA();
        break;
      case 'B':
        CharacterInf = new CharacterInfB();
        break;
      //...
      case 'Z':
        CharacterInf = new CharacterInfZ();
        break;
      default:
        cout<<"Not Implemented"<<endl;
        throw("Not Implemented");
      }
      hashMap[key] = CharacterInf;
    }
    return CharacterInf;
  }

};


//The Main method
int main()
{
  string document = "AAZZBBZB";
  const char* chars = document.c_str();

  CharacterInfFactory* factory = new CharacterInfFactory;

  // extrinsic state
  int pointSize = 10;

  // For each CharacterInf use a flyweight object
  for(size_t i = 0; i < document.length(); i++)
  {
    pointSize++;
    CharacterInf* CharacterInf = factory->GetCharacterObj(chars[i]);
    CharacterInf->Display(pointSize);
  }

  //Clean memory
  delete factory;

  return 0;
}
